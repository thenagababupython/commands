Services:-
EC2
Lambda


EC2:-
~we can connect to ec2-instance through putty using ppk file but by using moba-xterm we can use .pem file directly without converting to .ppk file.
-->Instance creation-->ami creation-->instance creation from ami

~To access ec2 instances from cli without gui as follows.
#curl http://169.254.169.254/latest/   or   #ec2-metadata (it gives all the information at a time)
 dynamic
 meta-data
 user-data
#curl http://169.254.169.254/latest/user-data/
 yum update -y
 yum install nginx -y
#curl http://169.254.169.254/latest/meta-data/
 ami-id
 ami-launch-index
 .
 .
 instance-id
 instance type
 .
 .
#curl http://169.254.169.254/latest/meta-data/instance-type
 t2.nano  

To connect to an instance without key by using password& public ip:----

#nano /etc/ssh/sshd_config
~edit password authentication no to yes
#service sshd restart
#passwd ec2-user
~set a password
~then connect through putty without key

to create a user & login as a user:-
----------------------------------
~connect the instance through putty or mobaXterm.
$ sudo su -
$ useradd phani  --> to create a user phani
$ passwd phani   -->set a passwd 
$ nano /etc/ssh/sshd_config -->set password authentication yes
$ service sshd restart
~ connect to new terminal then it will logged u in that particular user after entering passwd.
  
ELASTIC IP'S:-

~When we stop & start an instance then its public ip changes everytime,to keep a same ip we use elaastic ip.
~create an elastic ip and associate it to the instance to keep public ip constant.
~If we disassociate the ip to the instance and releasing then it is under billing,
          so always associate elastic ip to instance to avoid billing. 
~if we don't need elastic ip release it.


KEYPAIRS:-

~when we create a key pair a pem file is downloaded.
~we can connect that instance from our local machine by using putty.
~putty knows only ppk files, so convert the pem file to ppk by using puttygen.
~open putty and give host name or ip address
~select auth under ssh and browse the private key file in .ppk format & click on open
~ec2-user
~sudo su - (to go to root access).

~we can connect directly from command line to that instance by following commands.
~ssh   
~cd downloads(change directory to where ppk file is located)
~ssh -i key.ppk(ppk file name) ec2-user@hostname (or ip address)
~exit

AMI& SNAPSHOTS:-

~From any ec2 instance create an AMI then automatically a snapshot is created  and this ami will appears under my ami's.
~By using this ami we can create an instance and get default stuff from the old instance to the new instance.


7.VOLUMES:-
Ebs:-
*it is permanent
*it available in diff types
*it can be dettached from instance and attached to another instance
*we can increase the volume

Instance store:-
*it is temporary
*only one form
*we can not attach it by default some instances have it
*it is fixed

~create an instance which is having instance store
#fdisk -l -->to list disks
#df -h -->to list disks along with mount points
~create another volume and attach that to the instance
~now check fdisk -l then 3 disks available
#lsblk -->list disks along with partition
#fdisk /dev/xvdf -->to create partitions
~m for help ,n for new partition ,w for save, q for quit
#lsblk
#sudo file -s /dev/xvdf----------to check file system
#mkfs.ext3 /dev/xvdf1 -->to create file system on a disk
#mkdir /5gbdrive/
#df -h -->to know mount point
#mount /dev/xvdf1 /5gbdrive/
#df -h 
#nano /etc/fstab
#umount /5gbdrive/ -->to unmount a drive

*spot instances:-we get these by coating a bid value
*reserved :-for upfront use we have to pay upfront by 1 or 3 years in advance
*sheduled reserved :-reserved for particular timings in a day
*dedicated host:-a separate physical server will be allocated for u

launch templates:-these are used for creation of same configuration instances everytime.


8.LOAD BALANCER:-
~create 3 instances each at 1a ,1b,1c and install nginx webserver in it using userdata.
~login to each instance and edit the homepage so that it can display its hostname.
#nano /usr/share/nginx/html/index.html
~ctrl+w gives search welcome
 <h1>WEB SERVER1</h1>
~create a targetgroup first and select the servers 1,2,3
~create a n/w load balancer and attach the target group to it and check load balancer is happening or not.
~create a DNS zone in Route53 name it as xyz.copy the dns servers and configure it in godaddy site.
~create a cname record for network load balancer so that people can access your webservers 1,2,3 using xyz
~remove server 3 and check the load balancing is happening or not
~create a new server and add it to the load balancer
~delete everything

userdata:=-
#!/bin/bash
yum update -y
yum install nginx -y
service nginx start


#nano /usr/share/nginx/html/index.html -->to edit nginx page and add a text

~load balancer works at region level if u want to use this over region level we use route53
systems manager:-
run command:-
~it is used to run same command on multiple instances at a time without connecting those instances.
~for that create a IAM role by selecting ssmfull access and attach that role to each instance and use run command
~login to each instance and do #ps -ef 
 select /usr/bin/amazon-ssm-agent
#/usr/bin/amazon-ssm-agent restart -->
~if we want to use some instances among all select those by using tag name

#!/bin/bash
useradd user1
useradd user2
useradd user3
yum install tree -y

~inorder to multiple instances we use tags by specifying a tag

#cat /etc/passwd -->to check list of users


9.AUTO SCALING:-(yes > /dev/null &)
~create an instance and install nginx server on it and configure it as mybank.com
#nano /usr/share/nginx/html/index.html
#yum install stress  -->stress is atool used to auto create load on cpu
#chkconfig nginx on
~take the ami of above instance
~deploy an application load balancer along with target group,but no need to add any instances.
~create an autoscaling group with a minimum of 1 and max of 3 instances.
 launch configuration -->which AMI,Keypair,autoscaling group,SG,insytance type
~configure autoscaling rules to increase the machines from 1 to 3 if CPU >40 and reduce 3 to 1 if CPU < 40
~simulate  a CPU work load by running stress tool.

#stress -c 8 -t 20m -->to put 8 cpus load for 20 mins

stress-ng --cpu 4 --vm 2 --fork 8 --switch 4 --timeout 1m

OS/Distro	Official AMI
ssh Username	Legacy / Community / Other AMI
ssh Usernames
Amazon Linux	      ec2-user	
Ubuntu	              ubuntu	root
Debian	              admin	root
RHEL 6.4 and late     ec2-user	
RHEL 6.3 and earlier  root	
Fedora	        fedora	        ec2-user, root
Centos	        centos	        root
SUSE	        ec2-user	root
BitNami	        bitnami	
TurnKey	        root	
NanoStack	ubuntu	
FreeBSD	        ec2-user	
OmniOS	        root
